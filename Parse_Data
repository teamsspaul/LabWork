#!/usr/bin/env python3
"""
This program will pull x-section information from the 
brookhaven site. I know this is janky, but its the easiest
fastest way for me to do it. 
"""
############################################################
############### Import Packages ############################
############################################################


import requests
from bs4 import BeautifulSoup
import re
import numpy as np

############################################################
#################### Open Link #############################
############################################################

#Might have to update these URLs
#Meaning they expire.
#google ENDF, pick the brookhaven link
#Search for the x-section you want, click the sigma symbol
#then interpolate the data so there is a 'Lin-Lin'
url_to_scrape='http://nucleardata.nuclear.lu.se/toi/Alpha.asp?sql=&Min=5000&Max=5200'

Name="five0to2"


#not sure what these two lines do, but it
#gets all the information from the URL, and saves
#it in a soup type...thingy
r = requests.get(url_to_scrape)
soup = BeautifulSoup(r.text,"lxml")

#Find the index of our starting point
x=soup.prettify().find('Parent')

#print(soup.prettify()[x:-1])

#Save all the information in a long list
LongList=soup.prettify()[x+3:-1].split('<sup>')

#open the output file
#output=open(Name+'.csv',"w")

Isotopes=np.array([])
Energies={}
Yield={}
HalfLife={}
#Modify the data, and store in file
for i in range(0,len(LongList)):
        Data=LongList[i].split("\n")
        Str=''
        for j in range(0,len(Data)):
                if "<td>" in Data[j]:
                        if "<b>" in Data[j+1]:
                                nuke=re.sub('<','',Data[j+2])
                                nuke=re.sub('>','',nuke)
                                nuke=re.sub('"','',nuke)
                                nuke=nuke.split("=")[2]
                                Str=Str+nuke
                                #print(nuke)
                        else:
                                Str=Str+Data[j+1].strip()+","
                                #print(Data[j+1].strip())

        #Str has the half-life and energy info
        List=Str.split(",")
        if len(List)>1:
                List[2]=re.sub('\xa0','',List[2])
                Time=float(List[2][0:-1])
                if List[2][-1]=='m':
                        Time=Time*60
                elif List[2][-1]=='h':
                        Time=Time*60*60
                elif List[2][-1]=='d':
                        Time=Time*60*60*24
                elif List[2][-1]=='y':
                        Time=Time*60*60*24*365.25
                List[2]='%.3e' % Time 

        if len(List)>1:
                List[1]=re.sub('&lt;','',List[1])
                List[1]=re.sub('~','',List[1])
                List[1]=re.sub('</td>','',List[1])
                List[1]=re.sub('\(','',List[1])
                List[1]=re.sub('\)','',List[1])
                List[1]=re.sub('calc','',List[1])

        #Make a list of unique isotopes
        Add=True
        if len(List)>1:
                for iso in Isotopes:
                        if List[3]==iso:
                                Add=False
                if Add:
                        #Isotopes.append(List[3])
                        Isotopes=np.append(Isotopes,List[3])
                        Energies[List[3]]=List[0]+","
                        Yield[List[3]]=List[1]+","
                        HalfLife[List[3]]=List[2]
                else:
                        E=Energies[List[3]]
                        Energies[List[3]]=E+List[0]+','
                        Y=Yield[List[3]]
                        Yield[List[3]]=Y+List[1]+","


def StrtoFloat(List):
        List2=[]
        for item in List:
                if len(item)==0:
                        item="0"
                List2.append(float(item))
        return(List2)

def LargerThan(List,Check):
        Larger=False
        for item in List:
                if item>Check:
                        Larger=True
        return(Larger)

                        
for isotope in Isotopes:
        Yieldstr=Yield[isotope]
        Yieldstr=Yieldstr.rsplit(',', 1)[0] #Remove last instance
        #YieldList=Yield[isotope].split(',')
        YieldList=Yieldstr.split(',')

        Energystr=Energies[isotope]
        Energystr=Energystr.rsplit(',',1)[0] #remove last instance
        #EnergyList=Energies[isotope].split(',')
        EnergyList=Energystr.split(',')


        Yieldfloat=StrtoFloat(YieldList)

        Protons=int(isotope[0:2])
        Isotope=int(isotope[3:])
        
        C1=Protons>90 and not Protons==94;
        
        if LargerThan(Yieldfloat,10) and C1:
        
                #EnergyYield=zip(EnergyList,YieldList)
                Y=YieldList
                X=EnergyList

                print(isotope)
        
                #Sort by Alpha Yield
                #(the reversed makes it highest to low)
                print([x for (y,x) in reversed(sorted(zip(Y,X)))])
                print([y for (y,x) in reversed(sorted(zip(Y,X)))])

                print(HalfLife[isotope])
                print("")
                #print("")
                #Sort by Alpha energy
                #print([x for (x,y) in sorted(zip(X,Y))])
                #print([y for (x,y) in sorted(zip(X,Y))])

        
        #print(EnergyYield)
        
        #print(isotope)
        #print(YieldList)
        #print(EnergyList)
        #print(HalfLife[isotope])
        #print(Str)
                #print (Data[j])
        #Data[0]=str(float(Data[0])*1e-6)
        #print(",".join(Data),file=output
        #quit()
#print(Isotopes)
#Isotopes=np.unique(Isotopes)
#print(Isotopes)

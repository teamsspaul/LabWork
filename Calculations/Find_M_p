#!/usr/bin/env python3

"""
Chem Calculations
"""

__author__     =  "Paul Mendoza"
__copyright__  =  "Copyright 2016, Planet Earth"
__credits__    = ["Sunil Chirayath",
                  "Charles Folden",
                  "Jeremy Conlin"]
__license__    =  "GPL"
__version__    =  "1.0.1"
__maintainer__ =  "Paul Mendoza"
__email__      =  "paul.m.mendoza@gmail.com"
__status__     =  "Production"

################################################################
##################### Import packages ##########################
################################################################

import os.path
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import datetime
from uncertainties import ufloat
from uncertainties.umath import *
from uncertainties import unumpy as unp
import re
import time
start_time = time.time()

import Functions as fun

#######################################################
# Known initial Molarities, and volumes
# Calculate final molarity and volume and density
#######################################################

Temperature=ufloat(24.8,3)
gramsOmol=ufloat(63.0130,0.0012)
dfDen=pd.read_csv('../Data/Nitric_Acid.csv')

PipettError=0.001 #Depends on volume preparing

#M1=ufloat(15.43,0.06)
M1=ufloat(4,0.13)
m1=fun.ConvertMol(True,M1,gramsOmol,dfDen,Temperature)

M2=ufloat(0,0)
m2=ufloat(0,0)

Vol1=ufloat(0.01,0.0003)
Vol2=ufloat(0.39,0.0039)

WtConcentration1=fun.GetWt(m1,gramsOmol)
WtConcentration2=fun.GetWt(m2,gramsOmol)
    
p1=fun.GetDensity(Temperature,WtConcentration1,dfDen)
p2=fun.GetDensity(Temperature,WtConcentration2,dfDen)


#Check calculation
m3,p3,Vol3,Wt,M3=fun.NewConcentration(m1,m2,gramsOmol,
                                Temperature,dfDen,
                                Vol1,Vol2)

print("Combine "+str(Vol1)+" ml of "+str(M1)+\
      " M solution with "+str(Vol2)+\
      " ml of "+str(M2)+" M solution, to get "+str(Vol3)+" ml of "+\
      str(M3)+" M solution")
print("The final density is "+str(p3))
print("The initial density is "+str(p1))

###################### Time To execute #################

print("--- %s seconds ---" % (time.time() - start_time))
